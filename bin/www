#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TDCC:server');

var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);


/**
 * Mongodb
 */
var mongodb = require('mongodb');
var MongoClient = mongodb.MongoClient;

var url = 'mongodb://localhost:27017/geo';

var g_db = null;

var g_c = null;

MongoClient.connect(url, function(err, db) {
  if(err) {
    console.dir(err);
    return;
  }
  
  g_db = db;

  g_c = g_db.collection('watch');

  // Promise.all([p]).then(function() {
  //   db.close();
  // }).catch(function(err) {
  //   console.dir(err);
  //   db.close();
  // });
});

var addGeo = function(record, callback) {
  record.serverDate = new Date();
  
  g_c.insert(record, function(err, result) {
    if (err) {
      console.dir(err);
    } else {
      if(callback) {
          callback(record, result.result);
      }
    }
  });
  
  //console.log('>>' + JSON.stringify(record));
};

/**
 * WebSocket...
 */

var url = require('url');
var WebSocketServer = require('ws').Server;
var wsServer = new WebSocketServer({ server: server });

var idCount = 1;

var jsonDateReviver = function(key, value) {
  var exp = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
  
  var a = exp.exec(value);
  
  if(typeof value == 'string' && a) {
    value = new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));
  }
  
  return value;
};

wsServer.on('connection', function connection(ws) {
  var location = url.parse(ws.upgradeReq.url, true);
  
  console.log('[CONNECT] ('+new Date()+') url := ' + ws.upgradeReq.url + '');

  ws.on('message', function(message, flag) {
    message = JSON.parse(message, jsonDateReviver);
    
    switch(message.action) {
      case 'data':
        addGeo(message.payload, function(record, result) {
          console.log(JSON.stringify(record));
          if(result.ok != 1) {
            console.error('ERROR : ' + result);
          }
        });
        break;
      case 'ping':
        //Ignore...
        break;
      default:
        //console.log(message);
        break;
    }
  });
  
  ws.on('close', function() {
    console.log('[CLOSE]' + new Date());
  });

  ws.send(JSON.stringify({id: idCount}));
  
  idCount++;
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
